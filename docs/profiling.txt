Information from profiling...


#### Attempt the first

The command I ran:

LOVETRIS> (time
           (flamegraph:save-flame-graph ("~/proyectos/profiling/search.stack")
             (run-searcher (lambda (state) (make-instance 'beam-searcher
                                                          :disable-beam t
                                                          :search-depth 4
                                                          :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                                          :start-state state))
                           5)))



Output:

Evaluation took:
  165.556 seconds of real time
  166.057226 seconds of total run time (163.555059 user, 2.502167 system)
  [ Run times consist of 13.424 seconds GC time, and 152.634 seconds non-GC time. ]
  100.30% CPU
  365,549,870,986 processor cycles
  150,103,373,136 bytes consed

#### Attempt the second
Changed get-worst-piece to return the placements that it computed, just so that the effort doesn't have to be repeated. This seems to have had a disproportionate effect on the performance; either that, or the testing environment has changed since the first time. I expected it to reduce the time by about 1/8, since there are 7 pieces and possible-next-states used to recompute the placements for 1 of them (the worst piece).


Output:

Evaluation took:
  99.318 seconds of real time
  99.498931 seconds of total run time (98.122657 user, 1.376274 system)
  [ Run times consist of 7.364 seconds GC time, and 92.135 seconds non-GC time. ]
  100.18% CPU
  219,295,790,834 processor cycles
  81,838,330,832 bytes consed


#### Attempt the third
Tried to make remove-duplicate-pieces more efficient by using a hash table instead of my shitty home-baked function. May have slowed things down elsewhere by forcing absolute coords to be sorted every time they're called. Might be necessary to instead always store absolute coords.

No, doesn't seem to have slowed things down elsewhere. Resulted in a ~10% speedup. If I'm applying optimisations / type hints, though, they should prob go in: expand-nodes, generate-children!, possible-next-states, get-worst-piece, get-placements.


Output:

Evaluation took:
  91.804 seconds of real time
  91.968067 seconds of total run time (90.996622 user, 0.971445 system)
  [ Run times consist of 6.451 seconds GC time, and 85.518 seconds non-GC time. ]
  100.18% CPU
  45 lambdas converted
  202,702,040,574 processor cycles
  45,863,290,000 bytes consed


Just as a benchmark, here's the performance with a search depth of 4 and no beam width.

LOVETRIS> (time
           (run-searcher (lambda (state)
                           (make-instance 'beam-searcher
                                          :disable-beam t
                                          :search-depth 4
                                          :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                          :start-state state))))
Evaluation took:
  1014.756 seconds of real time
  1016.544501 seconds of total run time (1005.414730 user, 11.129771 system)
  [ Run times consist of 48.876 seconds GC time, and 967.669 seconds non-GC time. ]
  100.18% CPU
  2,240,602,054,240 processor cycles
  541,250,795,040 bytes consed
  
8
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAA95DAAAAAAAA6AAAAA95DAAAAAAA9AAAAAA88A6AAAAAA22229AAAAAAAAAAAA2229AAAAA888FB2AEAAAAA8888AAAAAA95DAAAAAAA22AAAAAAA6AAAAA9AAAAA576AAAAAAAAAA2229AAAA888FB2AEAAAA8888AAAAA95DAAAAAA22AAAA576AAAAA80C8AAAAAAAA9AAAAA5AAAAAAAAA2228AAAAA220EAAAA83FAAAAA96AAA9AAA8883AAA8BBEEAAA56AAA8882AAA8AAAA7AAA567AAA8A2BEAAA023AA83FAAAA95AAA9AA803AAA8BA80C2A"

#### Attempt the fourth
Adding optimization declarations to expand-nodes, since it seems to have a lot of overhead. May have shaved off a second or two, but I honestly can't say for certain. At this point, I think it would be a more effective use of time to move on to multi-threading and avoiding already-explored paths in the tree.


Output:

Evaluation took:
  90.227 seconds of real time
  90.386108 seconds of total run time (89.383404 user, 1.002704 system)
  [ Run times consist of 4.909 seconds GC time, and 85.478 seconds non-GC time. ]
  100.18% CPU
  199,223,121,532 processor cycles
  45,862,361,168 bytes consed

#### Attempt the fifth
Added multi-threading, using 4 threads on this crappy lil laptop. Just about twice as fast. Wouldn't expect it to be 4 times faster because the threads have to switch to other tasks, not all of the code is multi-threaded, and even the part that IS multi-threaded does not split the work exactly evenly among the threads (4 threads, 17 tasks, 1 thread gets 5 tasks while the others get 4. That 1 thread is a bottleneck).


Output, run for 5 moves:

LOVETRIS> (time
             (run-searcher (lambda (state)
                             (make-instance 'beam-searcher
                                            :disable-beam t
                                            :search-depth 4
                                            :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                            :start-state state
                                            :num-threads 4))
                           5))
Evaluation took:
  41.839 seconds of real time
  133.822843 seconds of total run time (131.889528 user, 1.933315 system)
  [ Run times consist of 5.013 seconds GC time, and 128.810 seconds non-GC time. ]
  319.85% CPU
  92,380,428,098 processor cycles
  45,800,210,400 bytes consed
  
0
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAA95DAAAAAAAA6"

Output, run until end of game:

LOVETRIS> (time
             (run-searcher (lambda (state)
                             (make-instance 'beam-searcher
                                            :disable-beam t
                                            :search-depth 4
                                            :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                            :start-state state
                                            :num-threads 4))))
Evaluation took:
  495.426 seconds of real time
  1632.533584 seconds of total run time (1609.440973 user, 23.092611 system)
  [ Run times consist of 57.740 seconds GC time, and 1574.794 seconds non-GC time. ]
  329.52% CPU
  107 lambdas converted
  1,093,911,154,470 processor cycles
  540,842,578,112 bytes consed
  
8
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAA95DAAAAAAAA6AAAAA95DAAAAAAA9AAAAAA88A6AAAAAA22229AAAAAAAAAAAA2229AAAAA888FB2AEAAAAA8888AAAAAA95DAAAAAAA22AAAAAAA6AAAAA9AAAAA576AAAAAAAAAA2229AAAA888FB2AEAAAA8888AAAAA95DAAAAAA22AAAA576AAAAA80C8AAAAAAAA9AAAAA5AAAAAAAAA2228AAAAA220EAAAA83FAAAAA96AAA9AAA8883AAA8BBEEAAA56AAA8882AAA8AAAA7AAA567AAA8A2BEAAA023AA83FAAAA95AAA9AA803AAA8BA80C2A"


#### Attempt the sixth
Better distribution of work across threads results in further ~5% speed-up. Same amount of work is performed, it's just done in a more parallel fashion.


Output:

LOVETRIS> (time
             (run-searcher (lambda (state)
                             (make-instance 'beam-searcher
                                            :disable-beam t
                                            :search-depth 4
                                            :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                            :start-state state
                                            :num-threads 4))))
Evaluation took:
  474.201 seconds of real time
  1631.061262 seconds of total run time (1606.307788 user, 24.753474 system)
  [ Run times consist of 62.317 seconds GC time, and 1568.745 seconds non-GC time. ]
  343.96% CPU
  1,047,045,621,770 processor cycles
  540,864,774,752 bytes consed

8
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAA95DAAAAAAAA6AAAAA95DAAAAAAA9AAAAAA88A6AAAAAA22229AAAAAAAAAAAA2229AAAAA888FB2AEAAAAA8888AAAAAA95DAAAAAAA22AAAAAAA6AAAAA9AAAAA576AAAAAAAAAA2229AAAA888FB2AEAAAA8888AAAAA95DAAAAAA22AAAA576AAAAA80C8AAAAAAAA9AAAAA5AAAAAAAAA2228AAAAA220EAAAA83FAAAAA96AAA9AAA8883AAA8BBEEAAA56AAA8882AAA8AAAA7AAA567AAA8A2BEAAA023AA83FAAAA95AAA9AA803AAA8BA80C2A"

#### Attempt the seventh
Node cache. Holy shit, it's effective.

This is plain greedy search. Measuring the size of the search tree. It's much smaller. I set "num-threads" to 1 in order to see the best case scenario, where no branches are expanded unnecessarily due to cache race conditions.

LOVETRIS> (defparameter *s*
            (make-instance 'beam-searcher
                           :start-state (make-state)
                           :num-threads 1
                           :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                           :search-depth 4
                           :disable-beam t))
*S*
LOVETRIS> (expand-nodes! (list (search-tree *s*))
                         4
                         (heuristic-eval *s*)
                         nil
                         1
                         (create-node-cache (search-tree *s*)))
NIL
LOVETRIS> (count-nodes (search-tree *s*))
27756

And wow, performance is also way better! Although, annoyingly, the end result is slightly worse. This is an unfortunate consequence of reducing duplication. We will end up not exploring some paths as deeply as we should. In exchange, should be able to extend the search depth. Which might make up for that a little.

LOVETRIS> (time (run-searcher (lambda (state)
                                 (make-instance 'beam-searcher
                                                :disable-beam t
                                                :search-depth 4
                                                :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                                :start-state state
                                                :num-threads 4))))
Evaluation took:
  106.349 seconds of real time
  354.399005 seconds of total run time (349.180360 user, 5.218645 system)
  [ Run times consist of 12.713 seconds GC time, and 341.687 seconds non-GC time. ]
  333.24% CPU
  31 lambdas converted
  234,821,103,028 processor cycles
  121,373,991,264 bytes consed
  
5
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAAA083AAAAAAAA96AAAAAAA96AAAAAA576AAAAAAA88AAAAAAAA8EAAAAA822AAAAAAAA96AAAAAAA9A5AAAAAA9AAAAAAABAAAAA822A8AAAAAA82EAAAAAAA0BAAAAAA802EAAAAAAA2AAAAA5A8EAAAAA5AEAAAAA088BAAAAA822AAAAA95B6AAAAAA5AAAAA576AAAAAAAAAA22AAAA95AAAA9AAAA2AAA8222BAAA822AAAA56AA80C8AAAAAAA88AAA80AAA00EA00E

Next steps!
1) Optimise heuristics (of interest: how close will we get to -0.42786196, 0.48656175, -0.3844498, -0.6575638).
2) Consider how far it can be pushed (memory + time constraints; how big can the search depth be without blowing up the heap, how long can it take so that it still runs within a night.


#### Coming back to it (7 months later?)
I ran the same code as before but got the full 8 points. Must be some weird multhreading-dependent thing that causes a branch of the tree to not be explored?

Command:

LOVETRIS> (time
           (run-searcher (lambda (state)
                            (make-instance 'beam-searcher
                                           :disable-beam t
                                           :search-depth 4
                                           :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                           :start-state state
                                           :num-threads 4))))

Output:

Evaluation took:
  123.197 seconds of real time
  392.558759 seconds of total run time (384.659237 user, 7.899522 system)
  [ Run times consist of 19.812 seconds GC time, and 372.747 seconds non-GC time. ]
  318.64% CPU
  64 lambdas converted
  393,492,401,888 processor cycles
  147,431,608,784 bytes consed
  
8
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAAA083AAAAAAAA96AAAAAAA96AAAAAA576AAAAAAA88AAAAAAAA8EAAAAA822AAAAAAAA96AAAAAAA9A5AAAAAA9AAAAAAABAAAAA822A8AAAAAA82EAAAAAAA0BAAAAAA83AAAAA00BAAAAAAA802EAAAAAA00BAAAAA80AAAAAA9AAAAAA95DAE2AAAAA8AAAAAA95AAAAAA8AAAAA5A2AAAAA65AAAAA97AAAAAAAAA220EAAA88AAAA802AAAA8AAA8AA96A76AAA808AAA99A2AA999AAAA0AAA8AA088AA96A9AA5A8EA96BAA0AA65BA95DAA9AA022A95A"



Hmmmm. I'll have to refamiliarise myself with the code. Make sure that it's logically consistent. Think through possible causes of the score being lower.

In other good news, the score improves once again if we increase the search depth by 1:

LOVETRIS> (time 
           (run-searcher (lambda (state)
                            (make-instance 'beam-searcher
                                           :disable-beam t
                                           :search-depth 5
                                           :heuristic-eval (get-heuristic-eval -0.1 1.0 -0.4 -0.4)
                                           :start-state state
                                           :num-threads 4))))

Output:

Evaluation took:
  1725.859 seconds of real time
  5032.426727 seconds of total run time (4934.721762 user, 97.704965 system)
  [ Run times consist of 332.682 seconds GC time, and 4699.745 seconds non-GC time. ]
  291.59% CPU
  31 lambdas converted
  5,512,400,115,808 processor cycles
  1,813,653,405,712 bytes consed
  
9
"AAAAAAAA95AAAAAAAAA6AAAAAAAA2AAAAAAAA2AAAAAA82229AAAAAAA95A2AAAAAAA56AAAAAAA56AAAAAA9AAAAAAAAAAAA2229AAAAA888FB2AEAAAAA8888AAAAAAA22AAAAAAA6AAAAAA57AAAA95DAAAAAAAA0AAAAAA9AAAAA08FB2AEAAAAA088AAAAAA82AAAAAA6AAAAA6AAAA9AAAA95EAAAAA02B22AAAAA95DAAAAAA08A8AAAAA088EAAAA83AAAA957AAAAA6AAA082AAAA95AAAA22AAA6AAAAAA56AA8888AAA22AAA6A95AA088AAA0AAA6A088AA95AA0AA9A088AA00E"

At that rate of complexity increase, by the way, we can expect it to take 6+ hours to finish a game with a search depth of 6. Also, just to note that we haven't yet optimised the heuristics.
